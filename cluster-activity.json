#!/bin/sh
##############################################################################
#
# Output a datatable in JSON. 
# https://developers.google.com/chart/interactive/docs/reference#DataTable_toJSON
#
# Our intent is to compute an activity metric across all nodes of the
# cluster. I want to know what my machines are doing.
# The current method counts workunits in processing, see 
# SQL_SELECT_PIVOT_PROJECT below. Pretty good for last-lasting workunits that
# need over 1 day to complete. But this overestimates actual activity for
# fast-completing workunits. They artificially inflate the activity metric.
#
# Something about task.current_cpu_time on a daily basis? 
##############################################################################

readonly DATABASE=boinc_cluster_state.db
#readonly DATABASE=t/_test.db # for testing
#readonly DATABASE=t.db

readonly NULL_ROW='{ "c": [] }'

readonly COLUMN_DEFS='
	{
		"id": "created",
		"label": "Day",
		"type": "datetime"
	},
	{
		"id": "aster",
		"label": "Asteroids",
		"type": "number"
	},
	{
		"id": "roset",
		"label": "Rosetta",
		"type": "number"
	},
	{
		"id": "univ",
		"label": "Universe",
		"type": "number"
	},
	{
		"id": "wcg",
		"label": "World Community Grid",
		"type": "number"
	},
	{
		"id": "yoyo",
		"label": "yoyo",
		"type": "number"
	}'

# it's static: cannot adapt to new apps, so:
# we group by project, not app
# project names are fixed 
# Pro: it's super fast
readonly SQL_SELECT_PIVOT_PROJECT="
    SELECT 
        strftime('%Y', created, 'localtime') as created_y,
        strftime('%m', created, 'localtime') as created_m,
        strftime('%d', created, 'localtime') as created_d,
        -- order does not matter below
        COUNT(DISTINCT CASE WHEN project_name = 'yoyo@home'            THEN result.name END) AS yoyo,
        COUNT(DISTINCT CASE WHEN project_name = 'World Community Grid' THEN result.name END) AS wcg,
        COUNT(DISTINCT CASE WHEN project_name = 'Asteroids@home'       THEN result.name END) AS aster,
        COUNT(DISTINCT CASE WHEN project_name = 'Rosetta@home'         THEN result.name END) AS roset,
        COUNT(DISTINCT CASE WHEN project_name = 'Universe@Home'        THEN result.name END) AS univ
    FROM 
        result 
        JOIN task USING (task_id)
        JOIN task_state ON active_task_state = task_state.code
    WHERE 
        datetime(created) >= datetime('now', '-33 day')
        AND task_state.name = 'PROCESS_EXECUTING'
    GROUP BY 1, 2, 3"

readonly SQL_SELECT_JSON="
    SELECT 
        json_object('c', 
            json_array( 
				-- dumbass JSON dates use 0-based months
                json_object('v', 'Date(' || created_y || ',' || (created_m - 1) || ',' || created_d || ')'),
                -- order must match COLUMN_DEFS above
                json_object('v', aster),
                json_object('v', roset),
                json_object('v', univ),
                json_object('v', wcg),
                json_object('v', yoyo)
                ))
    FROM ( $SQL_SELECT_PIVOT_PROJECT )"

##############################################################################
# main

rows=$( sqlite3 -list -noheader -newline "," "$DATABASE" "$SQL_SELECT_JSON" )

# output entire document
cat <<_JSON_ 
{
	"cols": [ $COLUMN_DEFS ],
	"rows": [ $rows $NULL_ROW ]
}
_JSON_

exit 0

##############################################################################
# unused

readonly SQL_SELECT_GROUPED="
    SELECT 
        date(created, 'localtime') AS day,
        app_name,
        app_user_friendly_name, 
        project_name,
        app_user_friendly_name || ' (' || project_name || ')' AS app_project_name,
        COUNT(DISTINCT result_name) AS active_tasks
    FROM 
        result1
    WHERE 
        datetime(created) >= datetime('now', '-7 day')
    GROUP BY 1, 2, 3, 4, 5"

readonly SQL_SELECT_PIVOT_APPS="
    -- SELECT load_extension('pivot_vtab');
	DROP TABLE IF EXISTS apps_pivot;
    CREATE VIRTUAL TABLE apps_pivot USING pivot_vtab (
        -- rows
        ( SELECT DISTINCT date(created, 'localtime') AS day from result1 ),
        -- columns
        ( SELECT DISTINCT app_name, app_user_friendly_name || ' (' || project_name || ')' FROM result1 ORDER BY 1 ),
        -- cell values
        ( SELECT COUNT(DISTINCT result_name) AS active_tasks 
          FROM result1 WHERE ?1 = date(created, 'localtime') AND ?2 = app_name )
    );
	SELECT * FROM apps_pivot"
# Issues with this: it's super slow, as it runs a query for each cell.
# It really needs an index to run reasonably fast. Unfortunately the index I want is not supported:
# create index i1 result1(date(created, 'localtime'));
# See https://www.sqlite.org/deterministic.html
# What I can have is:
# create index i1 result1(date(created));
# but this means my days are slightly off: they are aligned to UTC time, not local.
# Also, annoying but acceptable: the table needs to be re-created everytime, to
# take into account any new apps.
# See also https://github.com/jakethaw/pivot_vtab/issues/7




