<?xml version="1.0" encoding="UTF-8"?>
<!--
	Populate (update) database with latest cluster state.
	See schema.sql for defintions.
  -->
<x:stylesheet 
	xmlns:x="http://www.w3.org/1999/XSL/Transform" 
	xmlns:str="http://exslt.org/strings"
	version="1.0">

	<x:output method="text" encoding="UTF-8" />

	<x:template match="/boinc_cluster_state">
		BEGIN TRANSACTION;
		<x:apply-templates />		
		COMMIT TRANSACTION;
	</x:template>	

	<!-- host_info -->
	<x:template match="host_info">
		INSERT OR REPLACE INTO host (
			updated,
			host_cpid,
			domain_name, 
			hostname,
			p_ncpus,
			p_vendor,
			p_model,
			os_name,
			os_version,
			product_name,
			p_mfpops,
			p_miops,
			p_features
		) VALUES (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			'<x:value-of select="host_cpid" />' ,
			'<x:value-of select="domain_name" />' ,
			'<x:value-of select="../../../@hostname" />', <!-- attribute of "boinc_client" element -->		
			<x:value-of select="p_ncpus" /> ,
			'<x:value-of select="p_vendor" />' ,
			'<x:value-of select="p_model" />' ,
			'<x:value-of select="os_name" />' ,
			'<x:value-of select="os_version" />' ,
			'<x:value-of select="product_name" />' ,
			<x:value-of select="round(p_fpops div 1000000)" /> ,
			<x:value-of select="round( p_iops div 1000000)" /> ,
			'<x:value-of select="p_features" />'
		);
		
		<x:apply-templates />
	</x:template>	

	<!-- GPU information -->
	<x:template match="host_info/coprocs/coproc/coproc_opencl">
		UPDATE host SET (
			updated,
			coproc_type,
			coproc_peak_flops, 
			coproc_name, 
			opencl_platform_version,
			opencl_device_version,
			opencl_driver_version
		) = (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			'<x:value-of select="../type" />' ,
			<x:value-of select="round(../peak_flops)" /> ,
			'<x:value-of select="name" />' ,
			'<x:value-of select="opencl_platform_version" />' ,
			'<x:value-of select="opencl_device_version" />' ,
			'<x:value-of select="opencl_driver_version" />' 
		)
		WHERE host_cpid = '<x:value-of select="../../../host_cpid" />';
	</x:template>	

	<!-- results in processing, actively or not -->
	<x:template match="result">
		<!-- get related structs -->
		<x:variable name="project"     select="../project[master_url = current()/project_url]" />
		<x:variable name="workunit"    select="../workunit[name = current()/wu_name]" />
		<x:variable name="app_version" select="../app_version[app_name = $workunit/app_name and version_num = current()/version_num]" />
		<x:variable name="app"         select="../app[name = $workunit/app_name]" />
		<x:variable name="host"        select="../host_info" />

		<x:if test="active_task">
			INSERT INTO task (
				-- task_id is autogenerated, and recalled below with last_insert_rowid()
				fraction_done,
				active_task_state,
				scheduler_state,
				current_cpu_time,
				elapsed_time,
				progress_rate
			) VALUES (
				<x:value-of select="active_task/fraction_done" /> ,
				<x:value-of select="active_task/active_task_state" /> ,
				<x:value-of select="active_task/scheduler_state" /> ,
				<x:value-of select="active_task/current_cpu_time" /> ,
				<x:value-of select="active_task/elapsed_time" /> ,
				<x:choose>
					<x:when test="active_task/progress_rate">
						<x:value-of select="active_task/progress_rate" />
					</x:when>
					<x:otherwise>NULL</x:otherwise>
				</x:choose>
			);			
		</x:if>
		
		INSERT INTO result (
			captured,
			name,
			wu_name,
			wu_rsc_mfpops_est,
			host_cpid,
			app_name,
			app_user_friendly_name,
			app_version_num,
			app_version_mflops,
			project_name,
			project_master_url,
			final_cpu_time,
			final_elapsed_time, 
			exit_status,
			state,
			report_deadline,
			received,
			estimated_cpu_time_remaining,
			task_id
		) VALUES (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			'<x:value-of select="name" />' , -- result name
			'<x:value-of select="wu_name" />' , -- workunit name
			<x:value-of select="round($workunit/rsc_fpops_est div 1000000)" />,
			'<x:value-of select="$host/host_cpid" />' , -- host
			'<x:value-of select="$app/name" />' , -- app name 
			'<x:value-of select="$app/user_friendly_name" />' , -- app name (long)
			<x:value-of select="version_num" /> , -- app version
			<x:value-of select="round($app_version/flops div 1000000)" /> , -- app flops
			'<x:value-of select="$project/project_name" />' , -- project name
			'<x:value-of select="$project/master_url" />' , -- project URL 
			<x:value-of select="final_cpu_time" /> , -- CPU time
			<x:value-of select="final_elapsed_time" /> , -- elapsed time
			<x:value-of select="exit_status" /> , -- exit code
			<x:value-of select="state" /> , -- result state
			datetime(<x:value-of select="report_deadline" />, 'unixepoch') , -- report deadline 
			datetime(<x:value-of select="received_time" />, 'unixepoch') , -- received time
			<x:value-of select="estimated_cpu_time_remaining" /> , -- CPU time
			<x:choose>
				<x:when test="active_task">last_insert_rowid()</x:when>
				<x:otherwise>NULL</x:otherwise>
			</x:choose>
		);
	</x:template>	

	<!-- completed results -->
	<x:template match="old_result">
		INSERT INTO result (
			captured,
			name,
			wu_name,
			host_cpid,
			project_master_url,
			app_name,
			exit_status,
			final_elapsed_time, 
			final_cpu_time,
			completed,
			reported
		) VALUES (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			'<x:value-of select="result_name" />' , -- result name
			(SELECT DISTINCT wu_name FROM result WHERE name = '<x:value-of select="result_name" />') , -- workunit name
			(SELECT host_cpid FROM host WHERE hostname = '<x:value-of select="../../../@hostname" />') , -- host 
			'<x:value-of select="project_url" />' , -- project URL
			'<x:value-of select="app_name" />' , -- app name 
			<x:value-of select="exit_status" /> , -- exit code
			<x:value-of select="elapsed_time" /> , -- elapsed time
			<x:value-of select="cpu_time" /> , -- CPU time
			datetime(<x:value-of select="completed_time" />, 'unixepoch') , -- completed time
			datetime(<x:value-of select="create_time" />, 'unixepoch') -- created time
		);
	</x:template>	

	<x:variable name="apos">&apos;</x:variable>
	<x:variable name="dapos">&apos;&apos;</x:variable>
	<x:variable name="quot">&quot;</x:variable>

	<x:template match="notice">
		INSERT INTO notice (
			updated,
			title,
			description, 
			created,
			arrived,
			is_private,
			project_name,
			category,
			link,
			seqno,
			hostname,
			host_cpid
		) VALUES (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			'<x:value-of select="title" />' ,
			'<x:value-of select="str:replace(description, $apos, $dapos)" />' ,
			datetime(<x:value-of select="create_time" />, 'unixepoch') ,
			datetime(<x:value-of select="arrival_time" />, 'unixepoch') ,
			<x:value-of select="is_private" /> ,
			'<x:value-of select="project_name" />' ,
			'<x:value-of select="category" />' ,
			'<x:value-of select="link" />' ,
			<x:value-of select="seqno" /> ,
			'<x:value-of select="../../../@hostname" />' ,
			(SELECT host_cpid FROM host WHERE hostname = '<x:value-of select="../../../@hostname" />')
		)
		-- based on the presence of the tuple {host_cpid,created,seqno}, 
		-- we determine this notice is a duplicate: only set the "updated" date
		ON CONFLICT (host_cpid,created,seqno) DO UPDATE SET updated = excluded.updated;
	</x:template>	

	<x:template match="msg">
		INSERT INTO message (
			updated,
			created,
			project_name,
			body,
			pri, 
			seqno,
			hostname,
			host_cpid
		) VALUES (
			'<x:value-of select="/boinc_cluster_state/@captured" />' ,
			datetime(<x:value-of select="time" />, 'unixepoch') ,
			'<x:value-of select="project" />' ,
			'<x:value-of select="str:replace(body, $apos, $dapos)" />' ,
			<x:value-of select="pri" /> ,			
			<x:value-of select="seqno" /> ,
			'<x:value-of select="../../../@hostname" />' ,
			(SELECT host_cpid FROM host WHERE hostname = '<x:value-of select="../../../@hostname" />')
		)
		-- based on the presence of the tuple {host_cpid,created,seqno}, 
		-- we determine this message is a duplicate: only set the "updated" date
		ON CONFLICT (host_cpid,created,seqno) DO UPDATE SET updated = excluded.updated;
	</x:template>

	<!-- ignore stray text in all nodes -->
	<x:template match="text()" />	

</x:stylesheet>
