#!/bin/sh
#
# Get cluster state as one big XML document. 
# Issue a BOINC GUI RPC request "get_state" against each cluster
# node, and assemble the results into a XML document.
# See
# https://boinc.berkeley.edu/trac/wiki/GuiRpcProtocol#get_state
#
# The XML document produced references a XSL stylesheet; this stylesheet
# is used to transform the document into HTML, client-side. 
# (Not to be confused with the CSS stylesheet, also used by the client.)
#
# Depends on: netcat
#

readonly BOINC_GUI_RPC_PORT=31416
readonly ETX=\\003 # control character used by BOINC GUI RPC

readonly TEMP=/tmp/boinc_cluster_state-$$

# the client will use this stylesheet to transform the result
readonly XSLT=gui.xsl

readonly cluster_nodes="bb10 bb15 bb30 bb34 bb37 bb43 bb47 bb55"
readonly other_nodes="beaglebone680 beaglebone230 beaglebone369"

NODES=$( shuf --echo $cluster_nodes $other_nodes ) # randomize nodes
NOW=$( date -Iseconds )

# get state for all cluster nodes
# each task executes concurrently
for node in $NODES
do
	echo "<boinc_gui_rpc_request>\n<get_state/>\n</boinc_gui_rpc_request>$ETX" | 
		nc -q 1 $node $BOINC_GUI_RPC_PORT >$TEMP-$node 2>$TEMP-$node.err & 
done

wait # for all tasks to finish

cat <<_XML_
<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet href="$XSLT" type="text/xsl" ?>

<boinc_cluster_state created="$NOW">
_XML_

for node in $NODES
do
	echo "<boinc_client hostname=\"$node\">"
	tr $ETX \\n <$TEMP-$node
	echo "</boinc_client>"
done 

echo "</boinc_cluster_state>"

rm $TEMP-*
